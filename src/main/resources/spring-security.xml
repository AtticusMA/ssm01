<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
			 xmlns:beans="http://www.springframework.org/schema/beans"
			 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
			 xmlns:sec="http://www.springframework.org/schema/security"
			 xsi:schemaLocation="http://www.springframework.org/schema/beans
                        http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
                        http://www.springframework.org/schema/context
                        http://www.springframework.org/schema/context/spring-context-3.1.xsd
                        http://www.springframework.org/schema/tx
                        http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
                        http://www.springframework.org/schema/security
                        http://www.springframework.org/schema/security/spring-security.xsd">
    
    <!-- 定义过滤内容 -->
	<http pattern="/static/**" security="none"></http>
	<http pattern="/login.jsp" security="none"></http>
	<!-- 声明url对应角色 -->
	<!--<http auto-config="true" use-expressions="true">-->
	<http auto-config="false" use-expressions="true">
		<!--<intercept-url pattern="/login.jsp" access="IS_AUTHENTICATED_ANONYMOUSLY"></intercept-url>-->
		<intercept-url pattern="/login.jsp" access="permitAll" />
		<intercept-url pattern="/admin/**" access="hasRole('ROLE_ADMIN')"></intercept-url>
		<intercept-url pattern="/**" access="hasRole('ROLE_USER')"></intercept-url>
		<!--将CSRF保护功能禁用,设置为true即为启用-->
		<!-- 必须添加此段声明，禁用CSRF功能 -->
		<!-- <csrf disabled="false"/>-->

		<!--<csrf request-matcher-ref="csrfSecurityRequestMatcher"></csrf>-->


		<!-- max-sessions只容许一个账号登录，error-if-maximum-exceeded 后面账号登录后踢出前一个账号，
              expired-url session过期跳转界面
              如果concurrency-control标签配置了error-if-maximum-exceeded="true"，max-sessions="1"，
              那么第二次登录时，是登录不了的。如果error-if-maximum-exceeded="false"，
              那么第二次是能够登录到系统的，但是第一个登录的账号再次发起请求时，会跳转到expired-url配置的url中-->
        <csrf disabled="true"></csrf>
		<!--所有的页面都是直接到webapp路径下的 -->
		<form-login login-page="/login.jsp" default-target-url="/index.jsp" always-use-default-target="false" authentication-failure-url="/login.jsp?error=true"></form-login>
		<logout invalidate-session="true" logout-success-url="/login.jsp" logout-url="/j_spring_security_logout"></logout>
		<session-management session-authentication-error-url="/login.jsp">
			<concurrency-control max-sessions="1" error-if-maximum-exceeded="false" expired-url="/login.jsp" session-registry-ref="sessionRegistry"/>
		</session-management>
		<expression-handler ref="webexpressionHandler"></expression-handler>
	</http>
	<!--这里添加了一个属性execludeUrls，允许人为排除哪些url。
   这里约定所有/rest/开头的都是Rest服务地址，上面的配置就把/rest/排除在csrf验证的范围之外了.
   源码可以发现，POST方法被排除在外了，也就是说只有GET|HEAD|TRACE|OPTIONS这4类方法会被放行，
   其它Method的http请求，都要验证_csrf的token是否正确，
   而通常post方式调用rest服务时，又没有_csrf的token，所以校验失败。
   解决方法：自己弄一个Matcher-->
	<!--<beans:bean id="csrfSecurityRequestMatcher" class="cn.quan.ssm.sec.CsrfSecurityRequestMatcher">
        <beans:property name="execludeUrls">
            <beans:list>
                <beans:value>/rest/</beans:value>
            </beans:list>
        </beans:property>
    </beans:bean>-->

	<beans:import resource="spring-context.xml"></beans:import>
	<beans:bean id="sessionRegistry" class="org.springframework.security.core.session.SessionRegistryImpl"/>

	<beans:bean id="webexpressionHandler" class="org.springframework.security.web.access.expression.DefaultWebSecurityExpressionHandler" />
	<!-- 登录管理 -->
	<authentication-manager>
		<authentication-provider>
			<!--<user-service>-->
				<!--<user name="adminer" password="adminer" authorities="ROLE_ADMIN,ROLE_USER"></user>-->
				<!--<user name="user" password="user" authorities="ROLE,ROLE_USER"></user>-->
			<!--</user-service>-->
			<!-- 自定义sql语句-->
			<!--<jdbc-user-service data-source-ref="dataSource" users-by-username-query="SELECT username,password,enable FROM sys_users WHERE username=?"-->
							   <!--authorities-by-username-query="SELECT username, authority FROM sys_authorities WHERE username=?"/>-->
			<!--这里面的查询的字段必须是这三个，以后做事必须按照教程中指出的，然后再试试其他想出来的-->
			<jdbc-user-service data-source-ref="dataSource" users-by-username-query="SELECT username,password,status as enabled FROM sys_users su WHERE username=?"
							   authorities-by-username-query="SELECT username,sr.name as authority
							   FROM sys_users su
							   left join sys_user_role sur on sur.user_id=su.id
							   left join sys_roles sr on sr.id=sur.role_id
							    WHERE username=?"></jdbc-user-service>
		</authentication-provider>
	</authentication-manager>

</beans:beans>